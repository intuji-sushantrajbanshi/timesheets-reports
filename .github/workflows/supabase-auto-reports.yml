name: Generate and Deploy Timesheets Supabase Report

on:
  schedule:
    - cron: '15 11 * * *' # Every day at 5 PM Nepal/Kathmandu Time (UTC+5:45)
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - master
      - main  # Added main branch support

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  render:
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.2'

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '3.1.11.1'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev

      - name: Cache R packages
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('**/renv.lock') }}
          restore-keys: ${{ runner.os }}-r-

      - name: Install R dependencies
        run: |
          R -e 'options(repos = c(CRAN = "https://cloud.r-project.org"))'
          R -e 'install.packages(c("rmarkdown", "knitr"), dependencies=TRUE)'
          R -e 'install.packages(c("httr", "jsonlite", "dplyr", "ggplot2", "lubridate"), dependencies=TRUE)'
          R -e 'install.packages(c("tinytex", "DBI", "RPostgres"), dependencies=TRUE)'
          R -e 'install.packages(c("scales", "forcats"), dependencies=TRUE)'
          R -e 'tinytex::install_tinytex(force = TRUE)'

      - name: Check Supabase credentials
        run: |
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_KEY" ]; then
            echo "‚ùå Supabase credentials are not properly set in GitHub secrets."
            exit 1
          else
            echo "‚úÖ Supabase credentials found"
          fi

      - name: Verify R package installation
        run: |
          R -e 'cat("üì¶ Checking required packages...\n")'
          R -e 'required_packages <- c("httr", "jsonlite", "dplyr", "ggplot2", "lubridate", "rmarkdown", "knitr")'
          R -e 'missing_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]'
          R -e 'if(length(missing_packages) > 0) { cat("‚ùå Missing packages:", paste(missing_packages, collapse=", "), "\n"); install.packages(missing_packages, dependencies=TRUE) } else { cat("‚úÖ All required packages installed\n") }'

      - name: Test Supabase connection
        run: |
          R -e '
          library(httr)
          library(jsonlite)
          
          # Test connection to Supabase
          response <- GET(
            url = paste0(Sys.getenv("SUPABASE_URL"), "/rest/v1/"),
            add_headers(
              "apikey" = Sys.getenv("SUPABASE_KEY"),
              "Authorization" = paste("Bearer", Sys.getenv("SUPABASE_KEY"))
            )
          )
          
          if (http_status(response)$category == "Success") {
            cat("‚úÖ Supabase connection successful\n")
          } else {
            cat("‚ùå Supabase connection failed:", http_status(response)$message, "\n")
            stop("Supabase connection test failed")
          }
          '

      - name: Render RMarkdown
        run: |
          echo "üîÑ Starting report generation..."
          Rscript -e 'rmarkdown::render("auto-report.Rmd", output_file = "timesheets-report.pdf")'
          echo "‚úÖ Report generation completed"

      - name: Check Query Status
        id: query_check
        run: |
          if [ -f query_status.txt ] && [ "$(cat query_status.txt)" == "SUCCESS" ]; then
            echo "‚úÖ Query executed successfully, proceeding with deployment."
            echo "query_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Query failed, aborting deployment."
            if [ -f error_log.txt ]; then
              echo "üìã Error details:"
              cat error_log.txt
            fi
            echo "query_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload PDF Artifact
        if: steps.query_check.outputs.query_status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: timesheets-report-pdf-${{ github.run_number }}
          path: timesheets-report.pdf
          retention-days: 30

      - name: Create deployment directory
        if: steps.query_check.outputs.query_status == 'success'
        run: |
          mkdir -p deploy
          cp timesheets-report.pdf deploy/
          echo "<html><body><h1>Timesheets Report</h1><p><a href='timesheets-report.pdf'>Download Latest Report (PDF)</a></p><p>Generated: $(date)</p></body></html>" > deploy/index.html

      - name: Deploy to GitHub Pages
        if: steps.query_check.outputs.query_status == 'success'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: deploy
          publish_branch: gh-pages
          keep_files: false
          commit_message: "üìä Update timesheets report - ${{ github.run_number }}"
