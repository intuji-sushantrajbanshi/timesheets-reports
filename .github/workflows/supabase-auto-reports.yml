name: Export Supabase Project Data to CSV

on:
  schedule:
    - cron: '15 7 * * 1-5' # Runs at 1:00 PM NPT (UTC+5:45) every weekday
  workflow_dispatch:
    inputs:
      target_projects:
        description: 'Comma-separated list of project names'
        required: true
        default: 'Sell & Parker,Coerco'
      date_filter:
        description: 'Predefined date filter'
        required: true
        default: 'YESTERDAY'
        type: choice
        options:
        - TODAY
        - YESTERDAY
        - THIS_WEEK
        - LAST_WEEK
        - THIS_MONTH
        - LAST_MONTH
        - TILL_DATE
      custom_start_date:
        description: 'Custom Start Date (YYYY-MM-DD) (optional)'
        required: false
      custom_end_date:
        description: 'Custom End Date (YYYY-MM-DD) (optional)'
        required: false

permissions:
  contents: write # Required to commit the CSV file

jobs:
  export-data:
    runs-on: ubuntu-latest
    env:
      # Use direct DB connection for better security and to avoid PostgREST limitations
      DB_HOST: "aws-0-ap-southeast-1.pooler.supabase.com" # Find this in your Supabase project settings
      DB_PORT: 5432 # Add this line
      DB_NAME: "postgres"
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      # Parameters for the script
      TARGET_PROJECTS: ${{ github.event.inputs.target_projects || 'Sell & Parker,Coerco,LFA First Response' }}
      DATE_FILTER: ${{ github.event.inputs.date_filter || 'YESTERDAY' }}
      CUSTOM_START_DATE: ${{ github.event.inputs.custom_start_date }}
      CUSTOM_END_DATE: ${{ github.event.inputs.custom_end_date }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas "psycopg[binary]" # Use psycopg for direct DB connection

      - name: Verify Credentials
        run: |
          if [ -z "${DB_USER}" ] || [ -z "${DB_PASS}" ]; then
            echo "❌ Database credentials (DB_USER, DB_PASS) are not set in GitHub Secrets."
            exit 1
          else
            echo "✅ Database credentials found."
          fi

      - name: DEBUG - Verify DB_USER Format
        id: verify_secret
        run: |
          echo "--- Verifying the format of the DB_USER secret ---"
          USER_VAR="${{ secrets.DB_USER }}"
          
          if [[ -z "$USER_VAR" ]]; then
            echo "::error::CRITICAL: The DB_USER secret is completely empty or not found."
            exit 1
          fi

          if [[ "$USER_VAR" != *"."* ]]; then
            echo "::error::CRITICAL: The DB_USER secret does not contain a period ('.')."
            echo "It appears to be missing the project_ref."
            echo "Received value (masked): [${{ secrets.DB_USER }}]"
            exit 1
          fi

          USER_PART=$(echo "$USER_VAR" | cut -d'.' -f1)
          PROJECT_REF_PART=$(echo "$USER_VAR" | cut -d'.' -f2)

          echo "Secret format appears CORRECT."
          echo "  - Username part found: [$USER_PART]"
          echo "  - Project Ref part found: [length: ${#PROJECT_REF_PART}]"
          echo "If the username or length is wrong, the secret value is incorrect."
          echo "--- Verification complete ---"

      - name: Run Data Export Script
        id: export_script
        run: python scripts/export_supabase_data.py

      - name: Upload CSV as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-time-export
          path: ${{ steps.export_script.outputs.csv_filepath }}
          retention-days: 30

      - name: Commit and Push CSV
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ steps.export_script.outputs.csv_filepath }}
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "feat(data): Daily project time export for ${{ env.DATE_FILTER }} on $(date -u +'%Y-%m-%d')"
            git push
          else
            echo "No changes to data, skipping commit."
          fi
